---
- name: Construct server properties file for kafka
  hosts: kafka
  gather_facts: true

  vars:
    debug_mode: false

    kafka_process_roles: "broker/controler"
    kafka_controler_port: 9093
    kafka_listener_port: 9092
    kafka_broker_listener_name: "PLAINTEXT"
    kafka_controler_listener_name: "CONTROLLER"
    kafka_num_network_threads: 3
    kafka_num_io_threads: 8
    kafka_socket_send_buffer_bytes: 102400
    kafka_socket_recieve_buffer_bytes: 102400
    kafka_socket_request_max_bytes: 104857600
    kafka_log_dir: "/tmp/kraft-combined-logs"
    kafka_num_partitions: 1
    kafka_num_recovery_threads_per_data: 1
    kafka_offset_topic_replication_factor: 1
    kafka_transaction_state_log_replication_factor: 1
    kafka_transaction_state_log_min_isr: 1
    kafka_log_retention_hours: 168
    kafka_log_segment_bytes: 1073741824
    kafka_log_retention_check_interval_ms: 300000

    kafka_instalation_path: "/app/kafka3"
    kafka_backup_path: "{{ kafka_instalation_path }}/backup"
    kafka_properties_path: "{{ kafka_instalation_path }}/kafka_2.13-3.7.0/config/kraft/server.properties"



  pre_tasks:

    - name: Gather all ip addresses
      set_fact:
        kafka_server_ips: "{{ groups['kafka'] | map('extract', hostvars, 'ansible_host') | list }}"
      run_once: true

    - name: debug ips of server
      ansible.builtin.debug:  
        var: kafka_server_ips
      run_once: true
      when: debug_mode
    
    - name: Create backup directory
      file:
        path: "{{ kafka_backup_path }}"
        state: directory

    - name: Backup the server.properties file
      copy:
        src: "{{ kafka_properties_path }}"
        dest: "{{ kafka_backup_path }}/server.properties_{{ ansible_date_time.iso8601_basic_short }}"
        remote_src: yes


  tasks:
    # process.roles
    - name: Replace process.roles in kafka server.properties file
      replace:
        path: "{{ kafka_properties_path }}"
        regexp: '^process.roles=.*'
        replace: "process.roles={{ kafka_process_roles }}"

    # cluster node.id
    - name: Construct cluster node id for kafka properties file
      set_fact:
        #kafka_node_id: "node.id={{ node_index }}"
        kafka_node_id: "{{ kafka_server_ips.index(ansible_host) + 1 }}"

    - name: debug node index 
      ansible.builtin.debug:  
        var: kafka_node_id   
      when: debug_mode  

    - name: Replace node.id in kafka server.properties file
      replace:
        path: "{{ kafka_properties_path }}"
        regexp: '^node.id=.*'
        replace: "node.id={{ kafka_node_id }}"

    # controler.quorum.voters
    - name: Construct the new line for controler quorum voters for kafka properties file
      set_fact:
        kafka_controller_quorum_voters: >-
          {%- for ip in kafka_server_ips -%}
          {{ loop.index }}@{{ ip }}:{{ kafka_controler_port }}
          {%- if not loop.last -%},{%- endif -%}
          {%- endfor -%}
      run_once: true
    
    - name: debug kafka_controller_quorum_voters of server
      ansible.builtin.debug:  
        var: kafka_controller_quorum_voters
      run_once: true
      when: debug_mode

    - name: Replace controller.quorum.voters in kafka server.properties file
      replace:
        path: "{{ kafka_properties_path }}"
        regexp: '^controller.quorum.voters=.*'
        replace: "controller.quorum.voters={{ kafka_controller_quorum_voters }}"

    # listeners
    - name: Construct kafka_listeners new line for kafka properties file
      set_fact:
        kafka_listeners: "PLAINTEXT://:{{ kafka_listener_port }},CONTROLLER:/:{{ kafka_controler_port }}"

    - name: debug kafka_listeners
      ansible.builtin.debug:
        var: kafka_listeners
      when: debug_mode
    
    - name: Replace listeners in kafka server.properties file
      replace:
        path: "{{ kafka_properties_path }}"
        regexp: '^listeners=.*'
        replace: "listeners={{ kafka_listeners }}"
    
    # inter.broker.listener.name
    - name: Replace listeners in kafka server.properties file
      replace:
        path: "{{ kafka_properties_path }}"
        regexp: '^inter.broker.listener.name=.*'
        replace: "inter.broker.listener.name={{ kafka_broker_listener_name }}"

    # adevertised.listeners
    - name: Replace advertised.listeners in kafka server.properties file
      replace:
        path: "{{ kafka_properties_path }}"
        regexp: '^advertised.listeners=.*'
        replace: "advertised.listeners={{ kafka_broker_listener_name }}://{{ ansible_default_ipv4.address }}:{{ kafka_listener_port }}"
    
    # controller.listener.names
    - name: Replace controller.listener.names in kafka server.properties file
      replace:
        path: "{{ kafka_properties_path }}"
        regexp: '^controller.listener.names=.*'
        replace: "controller.listener.names={{ kafka_controler_listener_name }}"
    
    # listener.security.protocol.map
    - name: Replace listener.security.protocol.map in kafka server.properties file
      replace:
        path: "{{ kafka_properties_path }}"
        regexp: '^listener.security.protocol.map=.*'
        replace: "listener.security.protocol.map={{ kafka_controler_listener_name }}:{{ kafka_broker_listener_name }},{{ kafka_broker_listener_name }}:{{ kafka_broker_listener_name }},SSL:SSL,SASL_{{ kafka_broker_listener_name }}:SASL_{{ kafka_broker_listener_name }},SASL_SSL:SASL_SSL"

    # num.network.threads
    - name: Replace num.network.threads in kafka server.properties file
      replace:
        path: "{{ kafka_properties_path }}"
        regexp: '^num.network.threads=.*'
        replace: "num.network.threads={{ kafka_num_network_threads }}"
    
    # num.io.threads
    - name: Replace num.io.threads in kafka server.properties file
      replace:
        path: "{{ kafka_properties_path }}"
        regexp: '^num.io.threads=.*'
        replace: "num.io.threads={{ kafka_num_io_threads }}"

    # socket.send.buffer.bytes --------------------------------------------------
    - name: Replace socket.send.buffer.bytes in kafka server.properties file
      replace:
        path: "{{ kafka_properties_path }}"
        regexp: '^socket.send.buffer.bytes=.*'
        replace: "socket.send.buffer.bytes={{ kafka_socket_send_buffer_bytes }}"

    # socket.receive.buffer.bytes
    - name: Replace socket.receive.buffer.bytes in kafka server.properties file
      replace:
        path: "{{ kafka_properties_path }}"
        regexp: '^socket.receive.buffer.bytes=.*'
        replace: "socket.receive.buffer.bytes={{ kafka_socket_recieve_buffer_bytes }}"

    # socket.request.max.bytes
    - name: Replace socket.request.max.bytes in kafka server.properties file
      replace:
        path: "{{ kafka_properties_path }}"
        regexp: '^socket.request.max.bytes=.*'
        replace: "socket.request.max.bytes={{ kafka_socket_request_max_bytes }}"
    
    # log.dirs
    - name: Replace log.dirs in kafka server.properties file
      replace:
        path: "{{ kafka_properties_path }}"
        regexp: '^log.dirs=.*'
        replace: "log.dirs={{ kafka_log_dir }}"
    
    # num.partitions
    - name: Replace num.partitions in kafka server.properties file
      replace:
        path: "{{ kafka_properties_path }}"
        regexp: '^num.partitions=.*'
        replace: "num.partitions={{ kafka_num_partitions }}"
    
    # num.recovery.threads.per.data.dir
    - name: Replace num.recovery.threads.per.data.dir in kafka server.properties file
      replace:
        path: "{{ kafka_properties_path }}"
        regexp: '^num.recovery.threads.per.data.dir=.*'
        replace: "num.recovery.threads.per.data.dir={{ kafka_num_recovery_threads_per_data }}"
    
    # offsets.topic.replication.factor
    - name: Replace offsets.topic.replication.factor in kafka server.properties file
      replace:
        path: "{{ kafka_properties_path }}"
        regexp: '^offsets.topic.replication.factor=.*'
        replace: "offsets.topic.replication.factor={{ kafka_offset_topic_replication_factor }}"
    
    # transaction.state.log.replication.factor
    - name: Replace transaction.state.log.replication.factor in kafka server.properties file
      replace:
        path: "{{ kafka_properties_path }}"
        regexp: '^transaction.state.log.replication.factor=.*'
        replace: "transaction.state.log.replication.factor={{ kafka_transaction_state_log_replication_factor }}"

    # transaction.state.log.min.isr
    - name: Replace transaction.state.log.min.isr in kafka server.properties file
      replace:
        path: "{{ kafka_properties_path }}"
        regexp: '^transaction.state.log.min.isr=.*'
        replace: "transaction.state.log.min.isr={{ kafka_transaction_state_log_min_isr }}"

    # log.retention.hours
    - name: Replace log.retention.hours in kafka server.properties file
      replace:
        path: "{{ kafka_properties_path }}"
        regexp: '^log.retention.hours=.*'
        replace: "log.retention.hours={{ kafka_log_retention_hours }}"

    # log.segment.bytes
    - name: Replace log.segment.bytes in kafka server.properties file
      replace:
        path: "{{ kafka_properties_path }}"
        regexp: '^log.segment.bytes=.*'
        replace: "log.segment.bytes={{ kafka_log_segment_bytes }}"
    
    # log.retention.check.interval.ms
    - name: Replace log.retention.check.interval.ms in kafka server.properties file
      replace:
        path: "{{ kafka_properties_path }}"
        regexp: '^log.retention.check.interval.ms=.*'
        replace: "log.retention.check.interval.ms={{ kafka_log_retention_check_interval_ms }}"
